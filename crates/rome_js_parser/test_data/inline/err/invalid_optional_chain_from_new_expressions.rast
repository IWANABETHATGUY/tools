JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsBinaryExpression {
                    left: JsNewExpression {
                        new_token: NEW_KW@0..4 "new" [] [Whitespace(" ")],
                        callee: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@4..8 "Test" [] [],
                            },
                        },
                        type_arguments: missing (optional),
                        arguments: missing (optional),
                    },
                    operator_token: L_ANGLE@8..9 "<" [] [],
                    right: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@9..15 "string" [] [],
                        },
                    },
                },
                operator_token: R_ANGLE@15..16 ">" [] [],
                right: missing (required),
            },
            semicolon_token: missing (optional),
        },
        JsUnknownStatement {
            items: [
                QUESTIONDOT@16..18 "?." [] [],
                IDENT@18..22 "test" [] [],
                L_PAREN@22..23 "(" [] [],
                R_PAREN@23..24 ")" [] [],
            ],
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@24..25 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsCallExpression {
                callee: JsStaticMemberExpression {
                    object: JsNewExpression {
                        new_token: NEW_KW@25..30 "new" [Newline("\n")] [Whitespace(" ")],
                        callee: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@30..34 "Test" [] [],
                            },
                        },
                        type_arguments: missing (optional),
                        arguments: missing (optional),
                    },
                    operator_token: QUESTIONDOT@34..36 "?." [] [],
                    member: JsName {
                        value_token: IDENT@36..40 "test" [] [],
                    },
                },
                optional_chain_token: missing (optional),
                type_arguments: missing (optional),
                arguments: JsCallArguments {
                    l_paren_token: L_PAREN@40..41 "(" [] [],
                    args: JsCallArgumentList [],
                    r_paren_token: R_PAREN@41..42 ")" [] [],
                },
            },
            semicolon_token: SEMICOLON@42..43 ";" [] [],
        },
    ],
    eof_token: EOF@43..44 "" [Newline("\n")] [],
}

0: JS_MODULE@0..44
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..43
    0: JS_EXPRESSION_STATEMENT@0..16
      0: JS_BINARY_EXPRESSION@0..16
        0: JS_BINARY_EXPRESSION@0..15
          0: JS_NEW_EXPRESSION@0..8
            0: NEW_KW@0..4 "new" [] [Whitespace(" ")]
            1: JS_IDENTIFIER_EXPRESSION@4..8
              0: JS_REFERENCE_IDENTIFIER@4..8
                0: IDENT@4..8 "Test" [] []
            2: (empty)
            3: (empty)
          1: L_ANGLE@8..9 "<" [] []
          2: JS_IDENTIFIER_EXPRESSION@9..15
            0: JS_REFERENCE_IDENTIFIER@9..15
              0: IDENT@9..15 "string" [] []
        1: R_ANGLE@15..16 ">" [] []
        2: (empty)
      1: (empty)
    1: JS_UNKNOWN_STATEMENT@16..24
      0: QUESTIONDOT@16..18 "?." [] []
      1: IDENT@18..22 "test" [] []
      2: L_PAREN@22..23 "(" [] []
      3: R_PAREN@23..24 ")" [] []
    2: JS_EMPTY_STATEMENT@24..25
      0: SEMICOLON@24..25 ";" [] []
    3: JS_EXPRESSION_STATEMENT@25..43
      0: JS_CALL_EXPRESSION@25..42
        0: JS_STATIC_MEMBER_EXPRESSION@25..40
          0: JS_NEW_EXPRESSION@25..34
            0: NEW_KW@25..30 "new" [Newline("\n")] [Whitespace(" ")]
            1: JS_IDENTIFIER_EXPRESSION@30..34
              0: JS_REFERENCE_IDENTIFIER@30..34
                0: IDENT@30..34 "Test" [] []
            2: (empty)
            3: (empty)
          1: QUESTIONDOT@34..36 "?." [] []
          2: JS_NAME@36..40
            0: IDENT@36..40 "test" [] []
        1: (empty)
        2: (empty)
        3: JS_CALL_ARGUMENTS@40..42
          0: L_PAREN@40..41 "(" [] []
          1: JS_CALL_ARGUMENT_LIST@41..41
          2: R_PAREN@41..42 ")" [] []
      1: SEMICOLON@42..43 ";" [] []
  3: EOF@43..44 "" [Newline("\n")] []
--
error[SyntaxError]: expected an expression but instead found '?.'
  ┌─ invalid_optional_chain_from_new_expressions.ts:1:17
  │
1 │ new Test<string>?.test();
  │                 ^^ Expected an expression here

--
error[SyntaxError]: Invalid optional chain from new expression.
  ┌─ invalid_optional_chain_from_new_expressions.ts:2:9
  │
2 │ new Test?.test();
  │         ^^

--
new Test<string>?.test();
new Test?.test();
